#!/usr/bin/env perl6

use v6

use File::Temp;

# Construct the test file (because we can't use "is export" in the spec)

our $perl = ~$*EXECUTABLE;

class Tempfile {
    has $.path;
    has $.handle;

    submethod BUILD(:$ext) {
        my $suffix = $ext ?? ".$ext" !! "";
        ($!path, $!handle) = tempfile(:$suffix);
    }

    method IO(Tempfile:D:) { self.path.IO }
    method Str(Tempfile:D:) { self.path }
}

class TestRunner {
    our %.default-tests =
        balanced-parens => '"(" ~ ")" <expr>',
        char-range => '<[a..z]>',
        complex-group => 'a(b[c]d[e[f(g)]]((h)i))j',
        dot => '.',
        dot-plus => '.+',
        empty => '',
        empty-code => '{}',
        escaped-class => '<[\"\\\\\s]>',
        group => 'a(b)c',
        non-cap-group => 'a[b]c',
        numbered-word => '\w\d+',
        parameterized-uniprop => '<:Script("Latin")>',
        print-class => '<print>',
        space => ' ',
        start-stop => '^$',
        uniprop => '<:Letter>',
        word => '\w+';

    has $.testfile;
    has %.tests = $?CLASS.default-tests;
    has Bool $.trace;
    has Bool $.dump;
    has Str $.test-name;
    has $.grammar-file = 'regex';

    submethod TWEAK() {
        self.tests<dogfood> = self.get-grammar unless self.tests<dogfood>;

        for dir('examples').grep(/\.gen6$/) -> $file {
            my $example = $file.slurp;
            my $test = ($file.basename ~~ /^(.*)\./)[0];
            my $name = 'example-' ~ $test;
            self.tests{$name} = $example unless self.tests{$name};
        }

        $!testfile = self.create-test-script;

        if self.test-name {
            self.add-named-test(self.test-name);
        } else {
            for self.tests.sort -> (:key($name), :value($regex)) {
                self.add-test($name, $regex);
            }
        }
    }

    method test-names(TestRunner:D:) { self.tests.keys.sort }

    method add-named-test(TestRunner:D: $name) {
        die "No such test: $name" if $name !~~ self.tests;
        my $regex = self.tests{$name};
        self.add-test($name, $regex);
    }

    method add-test(TestRunner:D: $name, $regex) {
        my $grammar =
            $name ~~ self.default-tests ?? 'Gen6Regex' !! 'Gen6Structure';

        self.testfile.handle.put("ok $grammar\.parse({$regex.perl}),");
        self.testfile.handle.put("  '$grammar test: $name';")
    }

    method get-grammar(TestRunner:D:) { self.grammar-file.IO.slurp }

    method create-test-script(TestRunner:D:) {
        # Construct the test script
        my $tmp = Tempfile.new(:ext('p6'));
        $tmp.handle.put('use Test;');
        $tmp.handle.put('use Grammar::Tracer;') if self.trace;
        $tmp.handle.print(self.get-grammar);
        $tmp.handle.put(self.structure);

        $tmp;
    }

    method structure() {
        q{
            grammar Gen6Structure {
                # Redefine ws to skip comments
                token ws { <!ww> [ '#' \N* || \s ]* }
                rule TOP {^ <statement>* $}
                rule statement { 'grammar' <name> '{' ~ '}' <tole>* }
                rule tole {
                    [ 'token' || 'rule'] <name>
                        '{' ~ '}' <Gen6Regex::compound_expr>
                }
                token name { <ident>+ }
            }
        };
    }

    method run-test-script(TestRunner:D:) {
        self.testfile.handle.close;
        if self.dump {
            self.testfile.IO.open.slurp.say;
            exit(0);
        } else {
            exit(run([$perl, ~self.testfile]).exitcode);
        }
    }
}

proto MAIN(|) {*}

multi sub MAIN(
    Bool :$list-tests!, #= Show valid --test values
) {
    say TestRunner.new.test-names.join(', ');
}

multi sub MAIN(
    Bool :$trace,     #= Use Grammar::Tracer to debug regexes
    Bool :$dump,      #= Dump test script (debugging)
    Str  :$test-name, #= Individual test to run (runs all by default)
) {
    my $runner = TestRunner.new(:$trace, :$dump, :$test-name);
    $runner.run-test-script()
}
